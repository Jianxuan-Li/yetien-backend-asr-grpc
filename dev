#!/bin/bash
if [ $1 == "" ]; then
    echo $"Usage: $0 {up|down|run|docker-restart}"
    exit 0
fi

PROJECT_NAME="yetien_asr_server_dev"
PYTHON_DEV_CONTAINER_NAME="asrserver_dev_container"
SVC_NAME="asrserver"

case $1 in
    up)
        if [ -z "$IN_CONTAINER" ] && [ "$IN_CONTAINER" == "yes" ]; then
            echo "Use this command out of container."
            exit 0
        fi
        docker compose -p $PROJECT_NAME -f docker/docker-compose.dev.yml run --name $PYTHON_DEV_CONTAINER_NAME -p 8008:8000 $SVC_NAME zsh
        ;;
    # the test-in-container command is used to run the tests in a new container.
    # please keep the test stateless, so that the tests can be run on github actions.
    test-in-container)
        docker compose -p $PROJECT_NAME -f docker/docker-compose.test.yml run backend_test /code/docker/test-in-container.sh
        docker compose -p $PROJECT_NAME -f docker/docker-compose.test.yml down
        ;;
    run)
        if [ -z "$IN_DEV_CONTAINER" ] || [ "$IN_DEV_CONTAINER" != "yes" ]; then
            echo "Use this command in container."
            exit 0
        fi
        poetry install
        poetry run python ./run.py
        ;;
    test)
        poetry install
        poetry run coverage run ./test.py
        poetry run coverage report
        ;;
    down)
        if [ -z "$IN_CONTAINER" ] && [ "$IN_CONTAINER" == "yes" ]; then
            echo "Use this command out of container."
            exit 0
        fi
        docker compose -p $PROJECT_NAME -f docker/docker-compose.dev.yml down
        docker stop $PYTHON_DEV_CONTAINER_NAME
        docker rm $PYTHON_DEV_CONTAINER_NAME
        ;;
    -h | --help)
        echo $"Usage: $0 {up|run|down|test}"
        ;;
esac
